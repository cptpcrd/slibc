name: CI
on: [push, pull_request]

defaults:
  run:
    shell: bash

env:
  RUST_BACKTRACE: '1'
  RUSTFLAGS: -D warnings

jobs:
  build:
    name: Build

    strategy:
      fail-fast: false

      matrix:
        toolchain: [stable, beta, nightly]
        target:
          - x86_64-unknown-netbsd
          - x86_64-linux-android
        os: [ubuntu-latest]

    # Allow nightly builds to fail
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up repo
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Build (std)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: build
          args: --verbose --target ${{ matrix.target }} --no-default-features --features std

      - name: Build (alloc)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: build
          args: --verbose --target ${{ matrix.target }} --no-default-features --features alloc

      - name: Build (no_std)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: build
          args: --verbose --target ${{ matrix.target }} --no-default-features

      - name: Build (nix)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: build
          args: --verbose --target ${{ matrix.target }} --features nix

  build-no-std:
    name: Build (no_std only)

    strategy:
      fail-fast: false

      matrix:
        target:
          - x86_64-unknown-openbsd
          - x86_64-unknown-dragonfly

    # Allow nightly builds to fail
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}

    runs-on: ubuntu-latest

    steps:
      - name: Set up repo
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          components: rust-src

      - name: Install xargo
        uses: actions-rs/install@v0.1
        with:
          crate: xargo
          version: latest
          use-tool-cache: true

      - name: Build (no_std)
        run: xargo build --verbose --target ${{ matrix.target }} --no-default-features

  test:
    name: Test

    strategy:
      fail-fast: false

      matrix:
        toolchain: [stable, beta, nightly]
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
        os: [ubuntu-latest]

        include:
          - toolchain: stable
            target: x86_64-apple-darwin
            os: macos-latest
          - toolchain: beta
            target: x86_64-apple-darwin
            os: macos-latest
          - toolchain: nightly
            target: x86_64-apple-darwin
            os: macos-latest

    # Allow nightly builds to fail
    continue-on-error: ${{ matrix.toolchain == 'nightly' }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up repo
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
      - name: Install 32-bit glibc build dependencies
        run: sudo apt-get update && sudo apt-get -y install gcc-multilib
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'i686-unknown-linux-gnu'

      - name: Test (std)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: test
          args: --verbose --target ${{ matrix.target }} --no-default-features --features std

      - name: Test (alloc)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: test
          args: --verbose --target ${{ matrix.target }} --no-default-features --features alloc

      - name: Test (no_std)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: test
          args: --verbose --target ${{ matrix.target }} --no-default-features

      - name: Test (std, release)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: test
          args: --verbose --target ${{ matrix.target }} --release --no-default-features --features std

      - name: Test (alloc, release)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: test
          args: --verbose --target ${{ matrix.target }} --release --no-default-features --features alloc

      - name: Test (no_std, release)
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: test
          args: --verbose --target ${{ matrix.target }} --release --no-default-features

  coverage-tarpaulin:
    name: Tarpaulin

    strategy:
      fail-fast: false

      matrix:
        toolchain: [stable]
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Install tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: v0.16.0
          use-tool-cache: true

      - name: Run tarpaulin
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: tarpaulin
          args: --verbose --out Xml --target ${{ matrix.target }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          name: ${{ matrix.toolchain }}-${{ matrix.target }}
          fail_ci_if_error: true
          env_vars: OS,TARGET,TOOLCHAIN,JOB
        env:
          JOB: ${{ github.job }}
          OS: ${{ matrix.os }}
          TARGET: ${{ matrix.target }}
          TOOLCHAIN: ${{ matrix.toolchain }}

  coverage-grcov:
    name: Grcov

    strategy:
      fail-fast: false

      matrix:
        toolchain: [nightly]
        target: [x86_64-apple-darwin]
        os: [macos-latest]
        features:
          - std
          - alloc
          - ''

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          command: test
          args: --verbose --target ${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
          RUSTDOCFLAGS: -Cpanic=abort

      - name: Install grcov
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          version: latest
          use-tool-cache: true

      - name: Run grcov
        uses: actions-rs/grcov@v0.1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          name: ${{ matrix.toolchain }}-${{ matrix.target }}
          fail_ci_if_error: true
          env_vars: OS,TARGET,TOOLCHAIN,JOB
          files: ./lcov.info
        env:
          JOB: ${{ github.job }}
          OS: ${{ matrix.os }}
          TARGET: ${{ matrix.target }}
          TOOLCHAIN: ${{ matrix.toolchain }}
